---
- name: Backup site
  tags:
    - global_backup
  block:
    - name: Set variables
      ansible.builtin.set_fact:
        container_name: "{{ wordpress_container_name }}"
        wp_dir: "{{ compose_project_dir }}"
        backup_dir: "{{ wordpress_site }}"
        site_name: "EAZYTraining"
        timestamp: "{{ ansible_date_time.iso8601 | regex_replace('[-T:.]', '') | regex_replace('([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{6})', '\\1-\\2-\\3-\\4') }}"
        unique_id: "{{ lookup('password', '/dev/null length=10 chars=ascii_letters,digits') }}"

    - name: Set file name of site
      ansible.builtin.set_fact:
        backup_file_name: "backup_{{ timestamp }}_{{ site_name }}_{{ unique_id }}_global.zip"

    - name: Create the script from template
      ansible.builtin.template:
        src: script_archiv.sh.j2
        dest: /tmp/backup_script.sh
        mode: '0755'
      failed_when: false

    - name: Execute the backup script for Backup entire WordPress site without backup_file_name
      ansible.builtin.command: /bin/bash /tmp/backup_script.sh
      register: script_output
      failed_when: false
      notify:
        - Drive_backup_handler

    - name: Print script output
      ansible.builtin.debug:
        var: script_output.stdout
      failed_when: false

    - name: Backup entire WordPress site with backup_file_name
      ansible.builtin.command: sh -c "cd {{ wordpress_site }} &&  zip -r {{ compose_project_dir }}/global_backup_site/{{ backup_file_name }} . -x \*uploads\*"
      failed_when: false
      args:
        creates: "{{ compose_project_dir }}/global_backup_site/{{ backup_file_name }}"
      #notify:
      #  - S3_backup_site_handler
      #  - Global_backup_db
